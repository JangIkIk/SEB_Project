// 여기에는 유용한 유효성 검증 함수가 있습니다

// [유효성 검증 함수]: 영어 또는 숫자만 가능
function onlyNumberAndEnglish(str) {
    return /^[A-Za-z][A-Za-z0-9]*$/.test(str);
    // 첫문장은 알파펫 대소문자구분없이 시작해야하며 알파벳or숫자로 끝나야한다.=
  }
  


  // [유효성 검증 함수]: 최소 8자 이상하면서, 알파벳과 숫자 및 특수문자(@$!%*#?&) 는 하나 이상 포함
  function strongPassword(str) {
    return /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/.test(str);

    // 처음시작(^)하는 앞쪽의((?=)) 모든문자열(.)중 없거나있을때(*) 알파벳으로 시작하고([A-Za-z])
    // 앞쪽의((?=)) 모든문자열중(.) 없거나있을때(*) 숫자이거나(\d)
    // 앞쪽의((?=)) 모든 문자열중(.) 없거나있을떄(*) 특수기호이거나(@$!%*#?&)
    // 알파벳,숫자,특수기호 @@@
    // 최소 8글자{8,}로 끝난다.


  }

  function test(str){
    return /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/.test(str)
  }
  console.log(test("a2%ssaaaa"));

  
  
  
//   function isPhoneNumber(str) {
//     // 패턴 기입
//     return /^[0][1][0?1?7?9?]-\d{3,4}-\d{4}$/.test(str);
//   }

//   console.log(isPhoneNumber("010-1234-1234"))
//   console.log(isPhoneNumber("017-123-1234"))
//   console.log(isPhoneNumber("018-1234-1234"))
//   console.log(isPhoneNumber("01012341234"))
//   console.log(isPhoneNumber("010-1234-abcd"))
  
  // /*
  // # 조건
  // 앞 번호는 010, 011, 017, 019 만 허용
  // 중간 번호는 3~4개 번호
  // 뒷 번호는 무조건 4개
  
  // # 결과 값
  // 전화 번호 1: 010-1234-1234  true
  // 전화 번호 2: 017-123-1234  true
  // 전화 번호 3: 018-1234-1234  false
  // 전화 번호 4: 01012341234  false
  // 전화 번호 5: 010-1234-abcd  false
  // */
  // console.log('전화 번호 1: 010-1234-1234', isPhoneNumber('010-1234-1234'))
  // console.log('전화 번호 2: 017-123-1234', isPhoneNumber('017-123-1234'))
  // console.log('전화 번호 3: 018-1234-1234', isPhoneNumber('018-1234-1234'))
  // console.log('전화 번호 4: 01012341234', isPhoneNumber('01012341234'))
  // console.log('전화 번호 5: 010-1234-abcd', isPhoneNumber('010-1234-abcd'))






// 정규표현식이란?
// 문자열에서 특정 내용 or 데이터를 찾거나 대체,추츨,검증하는데 사용을한다.
// 하지만 주석이나,공백을 허용하지않고 여러가지 기호를 혼합하여 사용하기때문에 가독성이좋지않음

// 정규식 생성코드
// 1. 리터럴 방식 
// const = regex = /abc/;

// 2. 생성자 방식
// const regex = new RegExp("abc");


  /*  [정규식플래그 = 정규식을 생성할때 고급검색을 위한 옵션설정]
  
  i - 대소문자를 구별하지 않고 검색
  * 정규식의 기본은값은 대소문자를 구분함! 구분하지않을때 사용!

  g - 문자열 내의 모든 패턴을 검색
  * /a/를 찾는다고 했을때 기본적인값은 처음에 해당되는 값 하나만 찾는데, 여기서 g플래그를 쓰면 문자열에 포함되있는 모든 a를 찾는다.

  m - 문자열의 행이 바뀌더라도 계속 검색한다.
  * 정규식 문자열이 여러 줄로 다루어 져야할때 사용되며, 아래에 있는
  * 입력시작앵커(^), 입력종료앵커(^)가 전체문자열이 아닌 각 줄별로 대응됨!

  s - . 이 개행문자 ₩n도 포함하도록
  u - 유니코드 전체를 지원
  y - 문자 내 특정 위치에서 검색을 진행하는 sticky 모드를 활성화
  */


  /* [정규표현식 매칭 패턴 (문자, 숫자 기호 등)] 
    a-zA-Z	알파벳 범위 지정 (소문자,대문자)
    ㄱ-ㅎ가-힣	한글 범위    (자음,모음)
    0-9	숫자 범위 지정
    .	모든 문자열(숫자, 한글, 영어, 특수기호, 공백 모두!단, 줄바꿈X)

    \d	숫자
    \D	숫자가 아닌 것
    \w	밑줄 문자를 포함한 영숫자 문자에 대응 [A-Za-z0-9_] 와 동일
    \W	\w 가 아닌 것
    \s	space 공백
    \S	space 공백이 아닌 것
    \특수기호	특수기호 (\* \^ \& \! \? ...등)
    */

/* [정규표현식 검색 패턴]
    |	: OR
    []	: 괄호안의 문자들 중 하나. or처리라 보면 된다.
         /abc/ "abc"를 포함하는
         /[abc]/ "a" 또는 "b" 또는 "c" 를 포함하는
         [다-바] 다 or 라 or 마 or 바
    [^문자] : 괄호안의 문자를 제외한 것 ([^abcd] => a,b,c,d를 제외)

    ^문자열	: 특정 문자열로 시작  (/^www/)

    문자열$ : 특정 문자열로 끝남 (/com$/)
        
*/

/* [정규표현식 갯수(수량) 반복패턴]
  ?	 : 없음 or 최대1개 /apple?/

  *	:  없음 or 있음(여러개) / Wo* / (붙여써야함)

  +	:  최소1개 or 있음(여러개) /Wo+/

  *? : 없음, 있음 and 없음, 최대1개 = 없음 {0}와 동일 ??

  +? : 최소1개, 있음 && 없음, 최대1개 = 한개 {1}와 동일 ??

  {n} : n개(개수를 정할수있음)

  {Min,} :	최소 Min개 이상

  {Min, Max} : 최소 Min개 이상, 최대 Max개 이하 
*/

/* [정규표현식 그룹]
  () : 그룹화 & 캡쳐(이 그룹을 기억하고 나중에 검사함)
  (?:패턴) : 그룹화
  (?=) : 앞쪽일치 /ab(?=c)/ (c앞에 있는 ab만 조회)
  (?!) :  앞쪽 불일치 /ab(?!c)/ (c앞에 있지 읺은 ab민 조회)
  (?<=) : 뒤쪽 일치 /(?<=ab)c/ (뒤에 c가 있는 ab만 조회)
  (?<!) : 뒤쪽 불일치 /(?<!ab)c/ (뒤에 c가 있지 않은 ab만조회)

*/

/* [정규표현식 주요 메서드]
  자바스크립트 코드 상에서는 아래 메서드를 통해 패턴을 검사하고, 매칭되는 문자열을 추출, 변환합니다.

메서드	                                          의미
("문자열").match(/정규표현식/플래그)	       "문자열"에서 "정규표현식"에 매칭되는 항목들을 배열로 반환
("문자열").replace(/정규표현식/, "대체문자열")	"정규표현식"에 매칭되는 항목을 "대체문자열"로 변환
("문자열").split(정규표현식)               	"문자열"을 "정규표현식"에 매칭되는 항목으로 쪼개어 배열로 반환
(정규표현식).test("문자열")               	"문자열"이 "정규표현식"과 매칭되면 true, 아니면 false반환
(정규표현식).exec("문자열")	                 match메서드와 유사(단, 무조건 첫번째 매칭 결과만 반환)

*/
